Route::get('court-appearance', [CourtAppearanceController::class, 'index'])->name('court-appearance.index');
Route::post('court-appearance/fetch', [CourtAppearanceController::class, 'fetchWitnesses'])->name('court-appearance.fetch');
Route::put('court-appearance/{witness}/update-status', [CourtAppearanceController::class, 'updateStatus'])->name('court-appearance.update-status');
Route::put('court-appearance/reschedule/{case}', [CourtAppearanceController::class, 'reschedule'])->name('court-appearance.reschedule');

<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\Models\CourtCase;
use App\Models\Witness;
use App\Models\NotificationSchedule;
use App\Models\Notification;
use App\Models\MessageTemplate;
use Carbon\Carbon;
use Illuminate\Support\Facades\DB;

class CourtAppearanceController extends Controller
{
    // Show the appearance panel
    public function index()
    {
        $divisions = \App\Models\Division::with('districts.courts')->get();
        $user = auth()->user();
        return view('admin.cases.appearance_panel', compact('divisions', 'user'));
    }

    // Fetch witnesses for selected filters (AJAX)
    public function fetchWitnesses(Request $request)
    {
        $request->validate([
            'division_id' => 'required|exists:divisions,id',
            'district_id' => 'required|exists:districts,id',
            'court_id'    => 'required|exists:courts,id',
            'date'        => 'required|date',
        ]);

        $cases = CourtCase::with(['witnesses'])
            ->where('court_id', $request->court_id)
            ->where(function ($q) use ($request) {
                $q->where('hearing_date', $request->date)
                  ->orWhereHas('reschedules', function ($q2) use ($request) {
                      $q2->where('reschedule_date', $request->date);
                  });
            })
            ->get();

        $response = $cases->map(function ($case) {
            // Get next reschedule (if any)
            $nextReschedule = $case->reschedules()
                ->where('reschedule_date', '>', $case->hearing_date)
                ->orderBy('reschedule_date', 'asc')
                ->first();

            return [
                'case_id' => $case->id,
                'case_no' => $case->case_no,
                'court_name' => $case->court ? $case->court->name_en : '',
                'hearing_date' => $case->hearing_date,
                'hearing_time' => $case->hearing_time,
                'next_schedule_date' => $nextReschedule->reschedule_date ?? null,
                'next_schedule_time' => $nextReschedule->reschedule_time ?? null,
                'witnesses' => $case->witnesses->map(function ($w) {
                    return [
                        'id' => $w->id,
                        'name' => $w->name,
                        'phone' => $w->phone,
                        'appeared_status' => $w->appeared_status ?? 'pending',
                        'reschedule_date' => $w->reschedule_date ?? null,
                        'reschedule_time' => $w->reschedule_time ?? null,
                    ];
                }),
            ];
        });

        return response()->json($response);
    }

    // Update witness status (AJAX)
    public function updateStatus(Request $request, Witness $witness)
    {
        $request->validate([
            'status' => 'required|in:pending,appeared,absent,excused',
        ]);

        $witness->update(['appeared_status' => $request->status]);
        return response()->json(['message' => 'Status updated successfully.']);
    }

    // Reschedule case & notifications
    public function reschedule(Request $request, CourtCase $case)
    {
        $request->validate([
            'reschedule_date' => 'required|date|after_or_equal:today',
            'reschedule_time' => 'nullable',
            'notify_options'  => 'required|array|min:1',
        ]);

        $notifyOptions = $request->notify_options;

        DB::beginTransaction();

        try {
            // Create a new reschedule record
            $reschedule = $case->reschedules()->create([
                'reschedule_date' => $request->reschedule_date,
                'reschedule_time' => $request->reschedule_time ?? $case->hearing_time,
                'created_by' => auth()->id(),
            ]);

            $witnesses = $case->witnesses;
            if ($witnesses->isEmpty()) {
                DB::commit();
                return response()->json(['message' => 'Case rescheduled successfully. No witnesses found.']);
            }

            $template = MessageTemplate::find(1); // default template

            foreach ($notifyOptions as $option) {
                $scheduleDate = match ($option) {
                    '10_days_before' => Carbon::parse($reschedule->reschedule_date)->subDays(10),
                    '3_days_before'  => Carbon::parse($reschedule->reschedule_date)->subDays(3),
                    'send_now'       => now(),
                    default          => now(),
                };

                if (Carbon::parse($request->reschedule_date)->lt($scheduleDate)) {
                    DB::rollBack();
                    return response()->json(['message' => "Reschedule date cannot be before notification ($option)."], 422);
                }

                $schedule = NotificationSchedule::create([
                    'case_id' => $case->id,
                    'template_id' => $template->id,
                    'channel' => $template->channel,
                    'status' => 'active',
                    'schedule_date' => $scheduleDate,
                    'created_by' => auth()->id(),
                ]);

                foreach ($witnesses as $w) {
                    Notification::create([
                        'schedule_id' => $schedule->id,
                        'witness_id' => $w->id,
                        'channel' => $template->channel,
                        'status' => 'pending',
                    ]);
                }
            }

            DB::commit();
            return response()->json(['message' => 'Case rescheduled and notifications updated successfully.']);
        } catch (\Exception $e) {
            DB::rollBack();
            return response()->json(['message' => 'Error: ' . $e->getMessage()], 500);
        }
    }
}


@extends('dashboard.layouts.admin')
@section('title', 'Court Appearance Panel')

@section('content')
<div class="app-content-header py-3">
    <div class="container-fluid">
        <h3 class="mb-0 page-title">Court Appearance Panel</h3>
    </div>
</div>

<div class="app-content py-3">
    <div class="container-fluid">
        {{-- Filter --}}
        <div class="card mb-4">
            <div class="card-body">
                <form id="filterForm" class="row g-3">
                    <div class="col-md-3">
                        <label class="form-label">{{ __('case.division') }}</label>
                        <select name="division_id" id="division_id" class="form-select">
                            <option value="">Select Division</option>
                            @foreach ($divisions as $division)
                                <option value="{{ $division->id }}">{{ $division->name_en }}</option>
                            @endforeach
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">{{ __('case.district') }}</label>
                        <select name="district_id" id="district_id" class="form-select">
                            <option value="">Select District</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">{{ __('case.court') }}</label>
                        <select name="court_id" id="court_id" class="form-select">
                            <option value="">Select Court</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Date</label>
                        <input type="date" name="date" id="filter_date" class="form-control" value="{{ date('Y-m-d') }}">
                    </div>
                    <div class="col-12 text-end">
                        <button class="btn btn-success" type="submit">Fetch Cases</button>
                    </div>
                </form>
            </div>
        </div>

        {{-- Cases --}}
        <div id="casesContainer" class="row g-3"></div>
    </div>
</div>

{{-- Reschedule Modal --}}
<div class="modal fade" id="rescheduleModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-sm">
        <form id="rescheduleForm" class="modal-content">
            @csrf
            <input type="hidden" id="rescheduleCaseId">
            <div class="modal-header">
                <h5 class="modal-title">Reschedule Appearance</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <label for="reschedule_date" class="form-label">Select New Date</label>
                <input type="date" id="reschedule_date" name="reschedule_date" class="form-control" required>

                <label for="reschedule_time" class="form-label mt-2">Select Time</label>
                <input type="time" id="reschedule_time" name="reschedule_time" class="form-control">

                <label class="form-label mt-3">Notification Options:</label>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" name="notify_options[]" value="10_days_before" id="notify_10">
                    <label class="form-check-label" for="notify_10">10 Days Before</label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" name="notify_options[]" value="3_days_before" id="notify_3">
                    <label class="form-check-label" for="notify_3">3 Days Before</label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" name="notify_options[]" value="send_now" id="notify_now">
                    <label class="form-check-label" for="notify_now">Send Now</label>
                </div>
            </div>
            <div class="modal-footer">
                <button type="submit" class="btn btn-primary">Save</button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
            </div>
        </form>
    </div>
</div>
@endsection

@push('scripts')
<script>
document.addEventListener('DOMContentLoaded', function() {
    const divisionSelect = document.getElementById('division_id');
    const districtSelect = document.getElementById('district_id');
    const courtSelect = document.getElementById('court_id');
    const casesContainer = document.getElementById('casesContainer');
    const filterForm = document.getElementById('filterForm');
    const token = document.querySelector('meta[name="csrf-token"]').getAttribute('content');

    // Dependent Dropdowns
    divisionSelect?.addEventListener('change', function() {
        districtSelect.innerHTML = '<option value="">Select District</option>';
        courtSelect.innerHTML = '<option value="">Select Court</option>';
        if (!this.value) return;
        fetch(`{{ url('admin/divisions') }}/${this.value}/districts`)
            .then(res => res.json())
            .then(data => data.forEach(d => districtSelect.appendChild(new Option(d.name_en, d.id))));
    });

    districtSelect?.addEventListener('change', function() {
        courtSelect.innerHTML = '<option value="">Select Court</option>';
        if (!this.value) return;
        fetch(`{{ url('admin/districts') }}/${this.value}/courts`)
            .then(res => res.json())
            .then(data => data.forEach(c => courtSelect.appendChild(new Option(c.name_en, c.id))));
    });

    // Fetch Cases
    filterForm.addEventListener('submit', function(e) {
        e.preventDefault();
        const formData = new FormData(this);
        fetch('{{ route("admin.court-appearance.fetch") }}', {
            method: 'POST',
            headers: {'X-CSRF-TOKEN': token},
            body: formData
        })
        .then(res => res.json())
        .then(data => {
            let html = '';
            if (!data.length) html = '<div class="alert alert-info">No cases found.</div>';
            else data.forEach(item => {
                html += `
                    <div class="col-md-6">
                        <div class="card shadow-sm">
                            <div class="card-header bg-success text-white">
                                Case: ${item.case_no} | Court: ${item.court_name}
                            </div>
                            <ul class="list-group list-group-flush">
                                ${item.witnesses.map(w => `
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        <div>
                                            <strong>${w.name}</strong> <br>
                                            <small>${w.phone}</small>
                                        </div>
                                        <div class="d-flex align-items-center">
                                            <div class="btn-group btn-group-sm me-2" role="group">
                                                ${['pending','appeared','absent','excused'].map(status => `
                                                    <input type="radio" class="btn-check" 
                                                        name="status_${w.id}" 
                                                        id="status_${w.id}_${status}" 
                                                        value="${status}" 
                                                        ${w.appeared_status === status ? 'checked' : ''}>
                                                    <label class="btn btn-outline-primary btn-sm" 
                                                        for="status_${w.id}_${status}"
                                                        onclick="updateStatus(${w.id}, '${status}')">
                                                        ${status.charAt(0).toUpperCase() + status.slice(1)}
                                                    </label>
                                                `).join('')}
                                            </div>
                                            <button class="btn btn-warning btn-sm" onclick="openReschedule(${item.case_id})">Reschedule</button>
                                        </div>
                                    </li>
                                `).join('')}
                            </ul>
                        </div>
                    </div>
                `;
            });
            casesContainer.innerHTML = html;
        });
    });

    // Update Status
    window.updateStatus = function(witnessId, status) {
        fetch(`{{ url('admin/court-appearance') }}/${witnessId}/update-status`, {
            method: 'PUT',
            headers: {
                'X-CSRF-TOKEN': token,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({status})
        }).then(res => res.json())
          .then(data => Swal.fire('Success', data.message, 'success'));
    }

    // Reschedule Modal
    const rescheduleModalEl = document.getElementById('rescheduleModal');
    const rescheduleModal = new bootstrap.Modal(rescheduleModalEl);
    const rescheduleForm = document.getElementById('rescheduleForm');
    const rescheduleDate = document.getElementById('reschedule_date');
    const rescheduleTime = document.getElementById('reschedule_time');
    const rescheduleCaseId = document.getElementById('rescheduleCaseId');

    window.openReschedule = function(caseId) {
        rescheduleCaseId.value = caseId;
        rescheduleDate.value = '';
        rescheduleTime.value = '';
        rescheduleModal.show();
    }

    rescheduleForm.addEventListener('submit', function(e){
        e.preventDefault();
        const notifyOptions = Array.from(document.querySelectorAll('input[name="notify_options[]"]:checked'))
                                   .map(el => el.value);

        fetch(`{{ url('admin/court-appearance/reschedule') }}/${rescheduleCaseId.value}`, {
            method: 'PUT',
            headers: {
                'X-CSRF-TOKEN': token,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                reschedule_date: rescheduleDate.value,
                reschedule_time: rescheduleTime.value,
                notify_options: notifyOptions
            })
        }).then(res => res.json())
          .then(data => {
              rescheduleModal.hide();
              Swal.fire('Success', data.message, 'success');
          });
    });
});
</script>
@endpush
